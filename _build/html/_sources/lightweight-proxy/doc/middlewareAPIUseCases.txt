## Middleware HTTP API 
```javascript
  interceptHttpReq = function (proxyReq, cliRes, reqNextCb)
    /*
    proxyReq = LwpHttpIncoming
    cliRes = http.ServerResponse
    reqNextCb = function(err, proxyReq, proxyResCb)
    proxyReq = LwpHttpIncoming or http.ClientRequest
    Request chain termination on following:
      1) Non Null Error
      2) Null proxyReq
      3) proxyReq is object type http.ClientRequest
      4) Exception
    proxyResCb = function(proxyRes, resNextCb)
    resNextCb = function(err, proxyRes)
    Response chain termination on following:
      1) Non Null Error
      2) Null proxyRes
      3) Exception
    proxyRes = LwpHttpIncoming object
    */
```
### Use cases 

#### 1. Proxy Request Header Manipulation
```javascript
  function interceptHttpReq(proxyReq, cliRes, reqNextCb) {
    proxyReq.headers['X-forwarded-for'] = 'foo';
    reqNextCb(null, proxyReq);
  }
```
####  2: Proxy Response Header Manipulation
```javascript
  function interceptHttpReq(proxyReq, cliRes, reqNextCb) {
    proxyResCb = function(proxyRes, resNextCb) {
      proxyRes.headers['X-Server'] = 'bar';
      resNextCb(null, proxyRes);
    };
    reqNextCb(null, proxyReq, proxyResCb);
  }
```

#### 3. Request & Response Transformation
```javascript
  function interceptHttpReq(proxyReq, cliRes, reqNextCb) {
    proxyReq.pushStream(proxyReq.pipe(transformer()));
    proxyResCb = function(proxyRes, resNextCb) {
      proxyRes.pushStream(proxyRes.pipe(transformer()));
      resNextCb(null, newProxyRes);
    };
    reqNextCb(null, proxyReq, proxyResCb);
  }
```

#### 4. Respond to client and terminate request chain
```javascript
  function interceptHttpReq(proxyReq, cliRes, reqNextCb) {
    //Consume or drain proxyReq
    proxyReq.on('data', function(chunk) {});
    proxyReq.on('end', function() {
      cliRes.write('End of world');
      cliRes.end();
      //Terminates the chain
      reqNextCb(null, null);
    });
  }
```

#### 5. Respond to client and terminate response chain
```javascript
  function interceptHttpReq(proxyReq, cliRes, reqNextCb) {
    proxyResCb = function(proxyRes, resNextCb) {
      //Consume or drain proxyRes
      proxyRes.on('data', function(chunk) {});
      proxyRes.on('end', function() {
        cliRes.write('End of world');
        cliRes.end();
        //Terminates the chain
        resNextCb(null, null);
      });
    }
    reqNextCb(null, proxyReq, proxyResCb);
  }
```

#### 6. Error termination
```javascript
  function interceptHttpReq(proxyReq, cliRes, reqNextCb) {
    if proxyReq.headers['foo'] = 'bar' {
      error = new Error('End of world');
      reqNextCb(err, null);
    } else {
      reqNextCb(null, proxyReq);
    }
  }
```

#### 7. Forwarder middleware/last layer
```javascript
  function interceptHttpReq(proxyReq, cliRes, reqNextCb) {
    newHttpReq = new http.ClientRequest(proxyReq.options);
    newHttpReq.headers = proxyReq.headers; //Copy all other relevant attributes
    proxyReq.pipe(newHttpReq);
    proxyResCb = function(proxyRes, resNextCb) {
      cliRes.setHeader(proxyRes.headers);
      cliRes.pipe(proxyRes);
    }
    reqNextCb(null, newHttpReq, proxyResCb);
  }
```

####  8: Express/connnect compatibility
```javascript
  function interceptHttpReq(proxyReq, cliRes, reqNextCb) {
     compression(proxyReq, cliRes, function(err) {
       reqNextCb(err, proxyReq);
     });
   }
```

### Other Middleware HTTP API options

#### No cliRes in interceptHttpReq API
```javascript
  interceptHttpReq = function(proxyReq, reqNextCb)
    /*
    proxyReq = LwpHttpIncoming
    reqNextCb = function(err, proxyReq, proxyResCb)
    proxyReq = LwpHttpIncoming or http.ClientRequest
    Request chain termination on following:
      1) Non Null Error
      2) Null proxyReq
      3) proxyReq is object type http.ClientRequest
      4) Exception
    proxyResCb = function(proxyRes, resNextCb)
    resNextCb = function(err, proxyRes)
    Response chain termination on following:
      1) Non Null Error
      2) Null proxyRes
      3) Exception
    proxyRes is LwpHttpIncoming object
    */
```
##### Drawbacks
As cliRes is not available, sending response to client and terminating chain
is not possible (Use case 4 & 5). Implementing forwarding/last layer is non-trivial
(Use case 7). Compatibility with express/connect modules is also not easily
avaialble (Use case 8).
