# F5 Statistics and Data Aggregation API Reference
## Overview
The F5 Statistics and Data Aggregation Node.js module allows Node.js programs to capture various metrics and send to a number of different backend systems. From a high-level it is based on the statsd client from [here](https://github.com/msiebuhr/node-statsd-client), but can support protocols besides statsd; and also supports transactions. This document describes how to use the API in your Node.js programs.

## Node module usage
```javascript
var F5Stats = require('f5stats');
```

## Class **F5Stats**
The F5Stats object is the global stats object instance. It provides the api to capture various metrics as well as transactions.
#### F5Stats(```options```)
Initializes the F5Stats instance.

*```options```*: Object containing key-value pairs used for configuration. Currently the supported options are 'url', which is the url for the backend server; 'token', with is the authentication token from the backend server; flushInterval, which is how often cached stats are sent to the backend (default is 10 seconds); and 'backend', which indicates the type of backend server (default is 'splunk', and 'leo' is also supported).

```javascript
var stats = F5Stats({
    url: 'http://localhost:8088',
    token: 'this-is-the-token',
    flushInterval: 10000,
    backend: 'splunk'
  });
```

### Counters
Counters are metrics that have a value set directly or is incremented or decremented by the specified delta, and are aggregated on the server.

#### counter(```name```, ```value```)
Set the counter *```name```* to *```value```*.

*```name```*: Name of the counter to set.

*```value```*: New value for the counter.

```javascript
stats.counter("request_body_size", 0);
```

#### increment(```name```, ```delta```)
Increment the counter named *```name```* by *```delta```*, or 1 if not specified.

*```name```*: Name of the counter to increment.

*```delta```*: Amount to increment counter by. Default value is 1.

The following lines are equivalent.
```javascript
// request_body_size == 0
stats.increment("request_body_size");
// request_body_size == 1
stats.increment("request_body_size", 1);
// request_body_size == 2
```

#### decrement(```name```, ```delta```)
Decrement the counter named *```name```* by *```delta```*, or 1 if not specified.

*```name```*: Name of the counter to decrement.

*```delta```*: Amount to decrement counter by. Default value is 1.

The following lines are equivalent.
```javascript
// request_body_size == 2
stats.decrement("request_body_size");
// request_body_size == 1
stats.decrement("request_body_size", 1);
// request_body_size == 0
```

### Gauges
A Gauge is a metric with an value calculated on the client.

#### gauge(```name```, ```value```)
Set the gauge *```name```* to *```value```*.

*```name```*: Name of the gauge to set.

*```value```*: New value for the gauge.

```javascript
stats.gauge("server_pkts", 1);
```

### Histograms
A Histogram is a metric for the rate of events over time, calculated on the server.

#### histogram(```name```, ```value```)
Set the histogram *```name```* to *```value```*.

*```name```*: Name of the histogram to set.

*```value```*: New value for the histogram.

```javascript
stats.histogram("server_cps", 1);
```

### Timings
A timing is a metric for elapsed times in milli-seconds.

#### timing(```name```, ```time```)

*```name```*: Name of the timing to set.

*```time```*: Current value for the timing in milli-seconds.

```javascript
stats.timing("ttfb_request", 150);
```

### Generic data
Pass a Javascript blob through to the backend.

#### object(```name```, ```obj```)

*```name```*: Name of the object to set.

*```obj```*: Javascript object.

```javascript
stats.object("ttfb_request", 150);
```

## Class **F5Stats.Transaction**
This object maintains the metrics for a transaction. No data is sent to the backend until send() is called.

#### Transaction()
Initializes the transaction.
```javascript
var strans = new stats.Transaction()
```

#### send()
Sends the transaction object to the backend. The transaction object is no longer usable at this point.
```javascript
strans.send();
```
