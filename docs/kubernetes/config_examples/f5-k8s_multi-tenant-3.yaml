# Deploy a BIG-IP Controller instance that
# manages the ctlr1 partition on the BIG-IP system
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: k8s-bigip-ctlr_1
  namespace: bigip-controllers
spec:
  replicas: 1
  template:
    metadata:
      name: k8s-bigip-ctlr_1
      labels:
        app: k8s-bigip-ctlr
    spec:
      serviceAccountName: bigip-ctlr-serviceaccount
      containers:
        - name: k8s-bigip-ctlr_1
          image: "f5networks/k8s-bigip-ctlr:1.3.0"
          env:
            - name: BIGIP_USERNAME
              valueFrom:
                secretKeyRef:
                  name: bigip-login
                  key: username
            - name: BIGIP_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: bigip-login
                  key: password
          command: ["/app/bin/k8s-bigip-ctlr"]
          args: [
            "--bigip-partition=ctlr1",
            "--bigip-url=10.190.24.171",
            "--bigip-username=$(BIGIP_USERNAME)",
            "--bigip-password=$(BIGIP_PASSWORD)",
            "use-secrets=true",
            ]

---
# manages the ctlr2 partition on the BIG-IP system
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: k8s-bigip-ctlr_2
  namespace: bigip-controllers
spec:
  replicas: 1
  template:
    metadata:
      name: k8s-bigip-ctlr_2
      labels:
        app: k8s-bigip-ctlr
    spec:
      serviceAccountName: bigip-ctlr-serviceaccount
      containers:
        - name: k8s-bigip-ctlr_2
          image: "f5networks/k8s-bigip-ctlr:1.3.0"
          env:
            - name: BIGIP_USERNAME
              valueFrom:
                secretKeyRef:
                  name: bigip-login
                  key: username
            - name: BIGIP_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: bigip-login
                  key: password
          command: ["/app/bin/k8s-bigip-ctlr"]
          args: [
            "--bigip-partition=ctlr2",
            "--bigip-url=10.190.24.171",
            "--bigip-username=$(BIGIP_USERNAME)",
            "--bigip-password=$(BIGIP_PASSWORD)",
            "--use-secrets=true",
            "--pool-member-type=cluster",
            ]

---
# create an Ingress for a Service in the ctlr2 partition
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: ingress1
  namespace: default
  annotations:
    # Provide an IP address from the external VLAN on your BIG-IP device
    virtual-server.f5.com/ip: "10.190.24.70"
    # Specify the BIG-IP partition containing the virtual server
    virtual-server.f5.com/partition: "ctlr2"
spec:
  backend:
    # The name of the Service you want to expose to external traffic
    serviceName: myService2
    servicePort: 80

---
# create a virtual server for a Service in the ctlr1 partition
kind: ConfigMap
apiVersion: v1
metadata:
  # name of the resource to create on the BIG-IP
  name: http.vs
  # The namespace to create the object in.
  # The k8s-bigip-ctlr watches all namespaces by default (as of v1.1).
  # If the k8s-bigip-ctlr is watching a specific namespace(s),
  # this setting must match the namespace of the Service you want to proxy
  # -AND- the namespace(s) the k8s-bigip-ctlr watches.
  namespace: default
  labels:
    # tells the k8s-bigip-ctlr to watch this ConfigMap
    f5type: virtual-server
data:
  # NOTE: schema v0.1.4 is required as of k8s-bigip-ctlr v1.3.0
  schema: "f5schemadb://bigip-virtual-server_v0.1.4.json"
  data: |
    {
      "virtualServer": {
        "backend": {
          "servicePort": 3000,
          "serviceName": "myService1",
          "healthMonitors": [{
            "interval": 30,
            "protocol": "http",
            "send": "GET /\r\n",
            "timeout": 120
          }]
        },
        "frontend": {
          "virtualAddress": {
            "port": 80,
            "bindAddr": "173.16.2.2"
          },
          "partition": "ctlr1",
          "balance": "least-connections-node",
          "mode": "http"
        }
      }
    }
