{
   "AWSTemplateFormatVersion" : "2010-09-09",
   "Description" : "Launching the Mesosphere DCOS cluster + BIG-IP",
   "Resources" : {
      "InternalMasterLoadBalancer" : {
         "Properties" : {
            "Subnets" : [
               {
                  "Ref" : "InternalSubnet"
               }
            ],
            "SecurityGroups" : [
               {
                  "Ref" : "LbSecurityGroup"
               },
               {
                  "Ref" : "AdminSecurityGroup"
               },
               {
                  "Ref" : "SlaveSecurityGroup"
               },
               {
                  "Ref" : "MasterSecurityGroup"
               }
            ],
            "Listeners" : [
               {
                  "LoadBalancerPort" : "5050",
                  "InstanceProtocol" : "HTTP",
                  "InstancePort" : "5050",
                  "Protocol" : "HTTP"
               },
               {
                  "LoadBalancerPort" : "2181",
                  "InstancePort" : "2181",
                  "InstanceProtocol" : "TCP",
                  "Protocol" : "TCP"
               },
               {
                  "Protocol" : "HTTP",
                  "InstanceProtocol" : "HTTP",
                  "InstancePort" : "8181",
                  "LoadBalancerPort" : "8181"
               },
               {
                  "LoadBalancerPort" : "80",
                  "InstancePort" : "80",
                  "InstanceProtocol" : "HTTP",
                  "Protocol" : "HTTP"
               },
               {
                  "Protocol" : "TCP",
                  "InstancePort" : "443",
                  "InstanceProtocol" : "TCP",
                  "LoadBalancerPort" : "443"
               },
               {
                  "InstanceProtocol" : "HTTP",
                  "InstancePort" : "8080",
                  "LoadBalancerPort" : "8080",
                  "Protocol" : "HTTP"
               }
            ],
            "Scheme" : "internal",
            "HealthCheck" : {
               "HealthyThreshold" : "2",
               "UnhealthyThreshold" : "2",
               "Target" : "HTTP:5050/health",
               "Timeout" : "5",
               "Interval" : "30"
            }
         },
         "Type" : "AWS::ElasticLoadBalancing::LoadBalancer"
      },
      "InboundNetworkAclEntry" : {
         "Properties" : {
            "NetworkAclId" : {
               "Ref" : "InternalNetworkAcl"
            },
            "CidrBlock" : "0.0.0.0/0",
            "Protocol" : "-1",
            "Egress" : "false",
            "RuleAction" : "allow",
            "PortRange" : {
               "To" : "65535",
               "From" : "0"
            },
            "RuleNumber" : "100"
         },
         "Type" : "AWS::EC2::NetworkAclEntry"
      },
      "InternalSubnetRouteTableAssociation" : {
         "Properties" : {
            "RouteTableId" : {
               "Ref" : "InternalRouteTable"
            },
            "SubnetId" : {
               "Ref" : "InternalSubnet"
            }
         },
         "Type" : "AWS::EC2::SubnetRouteTableAssociation"
      },
      "AdminSubnetRouteTableAssociation" : {
        "Properties" : {
          "RouteTableId" : {
            "Ref" : "AdminRouteTable"
          },
          "SubnetId" : {
            "Ref" : "AdminSubnet"
          }
        },
        "Type" : "AWS::EC2::SubnetRouteTableAssociation"
      },
      "ExternalSubnetRouteTableAssociation" : {
        "Properties" : {
          "RouteTableId" : {
            "Ref" : "ExternalRouteTable"
          },
          "SubnetId" : {
            "Ref" : "ExternalSubnet"
          }
        },
        "Type" : "AWS::EC2::SubnetRouteTableAssociation"
      },
      "MasterToSlaveIngress" : {
         "Type" : "AWS::EC2::SecurityGroupIngress",
         "Properties" : {
            "SourceSecurityGroupId" : {
               "Ref" : "MasterSecurityGroup"
            },
            "FromPort" : "0",
            "IpProtocol" : "-1",
            "GroupId" : {
               "Ref" : "SlaveSecurityGroup"
            },
            "ToPort" : "65535"
         }
      },
      "InternalRouteTable" : {
         "Type" : "AWS::EC2::RouteTable",
         "Properties" : {
            "Tags" : [
               {
                  "Value" : {
                     "Ref" : "AWS::StackName"
                  },
                  "Key" : "Application"
               },
               {
                  "Key" : "Network",
                  "Value" : "Internal"
               }
            ],
            "VpcId" : {
               "Ref" : "Vpc"
            }
         }
      },
      "AdminRouteTable" : {
        "Type" : "AWS::EC2::RouteTable",
        "Properties" : {
          "Tags" : [
            {
              "Value" : { "Ref" : "AWS::StackName" },
              "Key" : "Application"
            },
            {
              "Key" : "Network",
              "Value" : "Internal"
            }
          ],
          "VpcId" : {
            "Ref" : "Vpc"
          }
        }
      },
      "ExternalRouteTable" : {
        "Type" : "AWS::EC2::RouteTable",
        "Properties" : {
          "Tags" : [
            {
              "Value" : { "Ref" : "AWS::StackName" },
              "Key" : "Application"
            },
            {
              "Key" : "Network",
              "Value" : "External"
            }
          ],
          "VpcId" : {
            "Ref" : "Vpc"
          }
        }
      },
      "MasterRole" : {
         "Properties" : {
            "Policies" : [
               {
                  "PolicyName" : "root",
                  "PolicyDocument" : {
                     "Statement" : [
                        {
                           "Resource" : [
                              {
                                 "Fn::Join" : [
                                    "",
                                    [
                                       "arn:aws:s3:::",
                                       {
                                          "Ref" : "ExhibitorS3Bucket"
                                       },
                                       "/*"
                                    ]
                                 ]
                              },
                              {
                                 "Fn::Join" : [
                                    "",
                                    [
                                       "arn:aws:s3:::",
                                       {
                                          "Ref" : "ExhibitorS3Bucket"
                                       }
                                    ]
                                 ]
                              }
                           ],
                           "Effect" : "Allow",
                           "Action" : [
                              "s3:AbortMultipartUpload",
                              "s3:DeleteObject",
                              "s3:GetBucketAcl",
                              "s3:GetBucketPolicy",
                              "s3:GetObject",
                              "s3:GetObjectAcl",
                              "s3:ListBucket",
                              "s3:ListBucketMultipartUploads",
                              "s3:ListMultipartUploadParts",
                              "s3:PutObject",
                              "s3:PutObjectAcl"
                           ]
                        },
                        {
                           "Action" : [
                              "cloudformation:*"
                           ],
                           "Resource" : [
                              {
                                 "Ref" : "AWS::StackId"
                              },
                              {
                                 "Fn::Join" : [
                                    "",
                                    [
                                       {
                                          "Ref" : "AWS::StackId"
                                       },
                                       "/*"
                                    ]
                                 ]
                              }
                           ],
                           "Effect" : "Allow"
                        },
                        {
                           "Action" : [
                              "ec2:DescribeKeyPairs",
                              "ec2:DescribeSubnets",
                              "autoscaling:DescribeLaunchConfigurations",
                              "autoscaling:UpdateAutoScalingGroup",
                              "autoscaling:DescribeAutoScalingGroups",
                              "autoscaling:DescribeScalingActivities",
                              "elasticloadbalancing:DescribeLoadBalancers"
                           ],
                           "Effect" : "Allow",
                           "Resource" : "*"
                        }
                     ],
                     "Version" : "2012-10-17"
                  }
               }
            ],
            "Path" : "/",
            "AssumeRolePolicyDocument" : {
               "Version" : "2012-10-17",
               "Statement" : [
                  {
                     "Effect" : "Allow",
                     "Action" : [
                        "sts:AssumeRole"
                     ],
                     "Principal" : {
                        "Service" : [
                           "ec2.amazonaws.com"
                        ]
                     }
                  }
               ]
            }
         },
         "Type" : "AWS::IAM::Role"
      },
      "ExhibitorS3Bucket" : {
         "DeletionPolicy" : "Retain",
         "Type" : "AWS::S3::Bucket"
      },
      "MasterToMasterIngress" : {
         "Properties" : {
            "FromPort" : "0",
            "IpProtocol" : "-1",
            "ToPort" : "65535",
            "GroupId" : {
               "Ref" : "MasterSecurityGroup"
            },
            "SourceSecurityGroupId" : {
               "Ref" : "MasterSecurityGroup"
            }
         },
         "Type" : "AWS::EC2::SecurityGroupIngress"
      },
      "Vpc" : {
         "Type" : "AWS::EC2::VPC",
         "Properties" : {
            "EnableDnsSupport" : "true",
            "Tags" : [
               {
                  "Key" : "Application",
                  "Value" : {
                     "Ref" : "AWS::StackName"
                  }
               }
            ],
            "CidrBlock" : {
               "Fn::FindInMap" : [
                  "Parameters",
                  "VPCSubnetRange",
                  "default"
               ]
            },
            "EnableDnsHostnames" : "true"
         }
      },
      "InternalNetworkAcl" : {
         "Properties" : {
            "VpcId" : {
               "Ref" : "Vpc"
            },
            "Tags" : [
               {
                  "Value" : {
                     "Ref" : "AWS::StackName"
                  },
                  "Key" : "Application"
               }
            ]
         },
         "Type" : "AWS::EC2::NetworkAcl"
      },
      "SlaveToSlaveIngress" : {
         "Properties" : {
            "SourceSecurityGroupId" : {
               "Ref" : "SlaveSecurityGroup"
            },
            "FromPort" : "0",
            "ToPort" : "65535",
            "GroupId" : {
               "Ref" : "SlaveSecurityGroup"
            },
            "IpProtocol" : "-1"
         },
         "Type" : "AWS::EC2::SecurityGroupIngress"
      },
      "GatewayToInternet" : {
         "Type" : "AWS::EC2::VPCGatewayAttachment",
         "Properties" : {
            "VpcId" : {
               "Ref" : "Vpc"
            },
            "InternetGatewayId" : {
               "Ref" : "InternetGateway"
            }
         },
         "DependsOn" : "InternetGateway"
      },
      "SlaveSecurityGroup" : {
         "Type" : "AWS::EC2::SecurityGroup",
         "Properties" : {
            "VpcId" : {
               "Ref" : "Vpc"
            },
            "GroupDescription" : "Mesos Slaves"
         }
      },
      "MasterServerGroup" : {
         "Type" : "AWS::AutoScaling::AutoScalingGroup",
         "Properties" : {
            "Tags" : [
               {
                  "Value" : "mesos-master",
                  "PropagateAtLaunch" : "true",
                  "Key" : "role"
               }
            ],
            "MaxSize" : 1,
            "DesiredCapacity" : 1,
            "VPCZoneIdentifier" : [
               {
                  "Ref" : "InternalSubnet"
               }
            ],
            "AvailabilityZones" : [
               {
                  "Fn::GetAtt" : [
                     "InternalSubnet",
                     "AvailabilityZone"
                  ]
               }
            ],
            "MinSize" : 1,
            "LaunchConfigurationName" : {
               "Ref" : "MasterLaunchConfig"
            },
            "LoadBalancerNames" : [
               {
                  "Ref" : "ElasticLoadBalancer"
               },
               {
                  "Ref" : "InternalMasterLoadBalancer"
               }
            ]
         },
         "CreationPolicy" : {
            "ResourceSignal" : {
               "Timeout" : {
                  "Fn::FindInMap" : [
                     "Parameters",
                     "StackCreationTimeout",
                     "default"
                  ]
               },
               "Count" : 1
            }
         },
         "DependsOn" : "GatewayToInternet"
      },
      "VPCDHCPOptionsAssociation" : {
         "Properties" : {
            "DhcpOptionsId" : {
               "Ref" : "DHCPOptions"
            },
            "VpcId" : {
               "Ref" : "Vpc"
            }
         },
         "Type" : "AWS::EC2::VPCDHCPOptionsAssociation"
      },
      "SlaveToMasterIngress" : {
         "Properties" : {
            "FromPort" : "0",
            "IpProtocol" : "-1",
            "GroupId" : {
               "Ref" : "MasterSecurityGroup"
            },
            "ToPort" : "65535",
            "SourceSecurityGroupId" : {
               "Ref" : "SlaveSecurityGroup"
            }
         },
         "Type" : "AWS::EC2::SecurityGroupIngress"
      },
      "ElasticLoadBalancer" : {
         "DependsOn" : "GatewayToInternet",
         "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
         "Properties" : {
            "HealthCheck" : {
               "UnhealthyThreshold" : "2",
               "HealthyThreshold" : "2",
               "Interval" : "30",
               "Timeout" : "5",
               "Target" : "HTTP:5050/health"
            },
            "Listeners" : [
               {
                  "InstanceProtocol" : "HTTP",
                  "InstancePort" : "80",
                  "LoadBalancerPort" : "80",
                  "Protocol" : "HTTP"
               },
               {
                  "Protocol" : "TCP",
                  "InstanceProtocol" : "TCP",
                  "InstancePort" : "443",
                  "LoadBalancerPort" : "443"
               }
            ],
            "Subnets" : [
               {
                  "Ref" : "InternalSubnet"
               }
            ],
            "SecurityGroups" : [
               {
                  "Ref" : "LbSecurityGroup"
               },
               {
                  "Ref" : "AdminSecurityGroup"
               }
            ]
         }
      },
      "InternalRoute" : {
         "DependsOn" : "GatewayToInternet",
         "Properties" : {
            "RouteTableId" : {
               "Ref" : "InternalRouteTable"
            },
            "GatewayId" : {
               "Ref" : "InternetGateway"
            },
            "DestinationCidrBlock" : "0.0.0.0/0"
         },
         "Type" : "AWS::EC2::Route"
      },
      "AdminInternetRoute" : {
        "DependsOn" : "GatewayToInternet",
        "Properties" : {
          "RouteTableId" : { "Ref" : "AdminRouteTable" },
          "GatewayId" : { "Ref" : "InternetGateway" },
          "DestinationCidrBlock" : "0.0.0.0/0"
        },
        "Type" : "AWS::EC2::Route"
      },
      "ExternalInternetRoute" : {
        "DependsOn" : "GatewayToInternet",
        "Properties" : {
          "RouteTableId" : { "Ref" : "ExternalRouteTable" },
          "GatewayId" : { "Ref" : "InternetGateway" },
          "DestinationCidrBlock" : "0.0.0.0/0"
        },
        "Type" : "AWS::EC2::Route"
      },
      "SlaveLaunchConfig" : {
         "Type" : "AWS::AutoScaling::LaunchConfiguration",
         "Properties" : {
            "ImageId" : {
               "Fn::FindInMap" : [
                  "RegionToAmi",
                  {
                     "Ref" : "AWS::Region"
                  },
                  "stable"
               ]
            },
            "AssociatePublicIpAddress" : "true",
            "SecurityGroups" : [
               {
                  "Ref" : "SlaveSecurityGroup"
               }
            ],
            "IamInstanceProfile" : {
               "Ref" : "SlaveInstanceProfile"
            },
            "BlockDeviceMappings" : [
               {
                  "DeviceName" : "/dev/sdb",
                  "VirtualName" : "ephemeral0"
               }
            ],
            "KeyName" : {
               "Ref" : "KeyName"
            },
            "InstanceType" : {
               "Fn::FindInMap" : [
                  "Parameters",
                  "SlaveInstanceType",
                  "default"
               ]
            },
            "UserData" : {
               "Fn::Base64" : {
                  "Fn::Join" : [
                     "",
                     [
                       "#cloud-config\n",
                       "\"coreos\":\n",
                       "  \"units\":\n",
                       "  - \"command\": |-\n",
                       "      start\n",
                       "    \"content\": |\n",
                       "      [Unit]\n",
                       "      Description=AWS Setup: Formats the /var/lib ephemeral drive\n",
                       "      Before=var-lib.mount dbus.service\n",
                       "      [Service]\n",
                       "      Type=oneshot\n",
                       "      RemainAfterExit=yes\n",
                       "      ExecStart=/bin/bash -c \"(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)\"\n",
                       "    \"name\": |-\n",
                       "      format-var-lib-ephemeral.service\n",
                       "  - \"command\": |-\n",
                       "      start\n",
                       "    \"content\": |\n",
                       "      [Unit]\n",
                       "      Description=AWS Setup: Mount /var/lib\n",
                       "      Before=dbus.service\n",
                       "      [Mount]\n",
                       "      What=/dev/xvdb\n",
                       "      Where=/var/lib\n",
                       "      Type=ext4\n",
                       "    \"name\": |-\n",
		       "      var-lib.mount\n",
		       "  - \"command\": |-\n",
		       "      stop\n",
		       "    \"mask\": !!bool |-\n",
		       "      true\n",
		       "    \"name\": |-\n",
		       "      etcd.service\n",
		       "  - \"command\": |-\n",
		       "      stop\n",
		       "    \"mask\": !!bool |-\n",
		       "      true\n",
		       "    \"name\": |-\n",
		       "      update-engine.service\n",
		       "  - \"command\": |-\n",
		       "      stop\n",
		       "    \"mask\": !!bool |-\n",
		       "      true\n",
		       "    \"name\": |-\n",
		       "      locksmithd.service\n",
		       "  - \"command\": |-\n",
		       "      stop\n",
		       "    \"name\": |-\n",
		       "      systemd-resolved.service\n",
		       "  - \"command\": |-\n",
		       "      restart\n",
		       "    \"name\": |-\n",
		       "      systemd-journald.service\n",
		       "  - \"command\": |-\n",
		       "      restart\n",
		       "    \"name\": |-\n",
		       "      docker.service\n",
		       "  - \"command\": |-\n",
		       "      start\n",
		       "    \"content\": |\n",
		       "      [Unit]\n",
		       "      Before=dcos.target\n",
		       "      [Service]\n",
		       "      Type=oneshot\n",
		       "      StandardOutput=journal+console\n",
		       "      StandardError=journal+console\n",
		       "      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d\n",
		       "      ExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\n",
		       "    \"name\": |-\n",
		       "      dcos-link-env.service\n",
		       "  - \"content\": |\n",
		       "      [Unit]\n",
		       "      Description=Pkgpanda: Download DC/OS to this host.\n",
		       "      After=network-online.target\n",
		       "      Wants=network-online.target\n",
		       "      ConditionPathExists=!/opt/mesosphere/\n",
		       "      [Service]\n",
		       "      EnvironmentFile=/etc/mesosphere/setup-flags/bootstrap-id\n",
		       "      Type=oneshot\n",
		       "      StandardOutput=journal+console\n",
		       "      StandardError=journal+console\n",
		       "      ExecStartPre=/usr/bin/curl -fLsSv --retry 20 -Y 100000 -y 60 -o /tmp/bootstrap.tar.xz https://downloads.dcos.io/dcos/EarlyAccess/bootstrap/${BOOTSTRAP_ID}.bootstrap.tar.xz\n",
		       "      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\n",
		       "      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere\n",
		       "      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz\n",
		       "    \"name\": |-\n",
		       "      dcos-download.service\n",
		       "  - \"command\": |-\n",
		       "      start\n",
		       "    \"content\": |\n",
		       "      [Unit]\n",
		       "      Description=Pkgpanda: Specialize DC/OS for this host.\n",
		       "      Requires=dcos-download.service\n",
		       "      After=dcos-download.service\n",
		       "      [Service]\n",
		       "      Type=oneshot\n",
		       "      StandardOutput=journal+console\n",
		       "      StandardError=journal+console\n",
		       "      EnvironmentFile=/opt/mesosphere/environment\n",
		       "      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\n",
		       "      [Install]\n",
		       "      WantedBy=multi-user.target\n",
		       "    \"enable\": !!bool |-\n",
		       "      true\n",
		       "    \"name\": |-\n",
		       "      dcos-setup.service\n",
		       "    \"no_block\": !!bool |-\n",
		       "      true\n",
		       "  - \"command\": |-\n",
		       "      start\n",
		       "    \"content\": |-\n",
		       "      [Unit]\n",
		       "      Description=AWS Setup: Signal CloudFormation Success\n",
		       "      After=dcos.target\n",
		       "      Requires=dcos.target\n",
		       "      ConditionPathExists=!/var/lib/dcos-cfn-signal\n",
		       "      [Service]\n",
		       "      Type=simple\n",
		       "      Restart=on-failure\n",
		       "      StartLimitInterval=0\n",
		       "      RestartSec=15s\n",
		       "      EnvironmentFile=/opt/mesosphere/environment\n",
		       "      EnvironmentFile=/opt/mesosphere/etc/cfn_signal_metadata\n",
		       "      Environment=\"AWS_CFN_SIGNAL_THIS_RESOURCE=SlaveServerGroup\"\n",
		       "      ExecStartPre=/bin/ping -c1 leader.mesos\n",
		       "      ExecStartPre=/opt/mesosphere/bin/cfn-signal\n",
		       "      ExecStart=/usr/bin/touch /var/lib/dcos-cfn-signal\n",
		       "    \"name\": |-\n",
		       "      dcos-cfn-signal.service\n",
		       "  \"update\":\n",
		       "    \"reboot-strategy\": |-\n",
		       "      off\n",
		       "\"write_files\":\n",
                       "- \"content\": |\n",
                       "    H4sIAMVft1cAA+3SQU+DMBgGYK7br2j4AdAiLckSL548acRsWbiYCiggUtIyozH7735OppfttsVM3yck\n",
                       "    penX8LUvQWHyp9KG3hFxzhMpmcdFEgnFPucijjfjFhMRlSiZyFgwWk2U8Jg8ZlNbKzdoS63cP2vrKt22\n",
                       "    e+ru2t70pdWDsTvXx3N8jyciGPPPTfdQPwaNM93Bv0H3oTZXsyd/ivsn/0hR/okQymP84J3s8M/zf59O\n",
                       "    fL0aKufPGL1P/GoYejcLw7orytfx7whqE76IcCz52kATP2sWdbZMq2J51eZN31zP0/ntWXqx6G7essv8\n",
                       "    3Kfq9ZSe9W8fEwAAAAAAAAAAAAAAAAAAAADgT/oAXLFDbQAoAAA=\n",
                       "  \"owner\": |-\n",
                       "    root\n",
                       "  \"encoding\": \"base64\"\n",
                       "  \"path\": |-\n",
                       "    /etc/dockercfg.tgz\n",
                       "  \"permissions\": |-\n",
                       "    0644\n",
		       "- \"content\": |\n",
		       "    https://downloads.dcos.io/dcos/EarlyAccess\n",
		       "  \"owner\": |-\n",
		       "    root\n",
		       "  \"path\": |-\n",
		       "    /etc/mesosphere/setup-flags/repository-url\n",
		       "  \"permissions\": |-\n",
		       "    0644\n",
		       "- \"content\": |\n",
		       "    BOOTSTRAP_ID=3a2b7e03c45cd615da8dfb1b103943894652cd71\n",
		       "  \"owner\": |-\n",
		       "    root\n",
		       "  \"path\": |-\n",
		       "    /etc/mesosphere/setup-flags/bootstrap-id\n",
		       "  \"permissions\": |-\n",
		       "    0644\n",
		       "- \"content\": |\n",
		       "    [\"dcos-config--setup_537afa008db7ba8f99ce73f9c0ef425fa61d3454\", \"dcos-metadata--setup_537afa008db7ba8f99ce73f9c0ef425fa61d3454\"]\n",
		       "  \"owner\": |-\n",
		       "    root\n",
		       "  \"path\": |-\n",
		       "    /etc/mesosphere/setup-flags/cluster-packages.json\n",
		       "  \"permissions\": |-\n",
		       "    0644\n",
		       "- \"content\": |\n",
		       "    [Journal]\n",
		       "    MaxLevelConsole=warning\n",
		       "  \"owner\": |-\n",
		       "    root\n",
		       "  \"path\": |-\n",
		       "    /etc/systemd/journald.conf.d/dcos.conf\n",
		       "  \"permissions\": |-\n",
		       "    0644\n",
		       "- \"content\": |\n",
		       "    MESOS_CLUSTER=",
		       {
			 "Ref": "AWS::StackName"
		       },
		       "",
		       "\n",
		       "  \"path\": |-\n",
		       "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/mesos-master-provider\n",
		       "- \"content\": |\n",
		       "    ADMINROUTER_ACTIVATE_AUTH_MODULE=",
		       {
			 "Ref": "OAuthEnabled"
		       },
		       "",
		       "\n",
		       "  \"path\": |-\n",
		       "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/adminrouter.env\n",
		       "- \"content\": |\n",
		       "    MASTER_SOURCE=exhibitor\n",
		       "    EXHIBITOR_ADDRESS=",
		       {
			 "Fn::GetAtt": [
			   "InternalMasterLoadBalancer",
			   "DNSName"
			 ]
		       },
		       "",
		       "\n",
		       "    RESOLVERS=169.254.169.253\n",
		       "  \"path\": |-\n",
		       "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/dns_config\n",
		       "- \"content\": |\n",
		       "    EXHIBITOR_BACKEND=AWS_S3\n",
		       "    AWS_REGION=",
		       {
			 "Ref": "AWS::Region"
		       },
		       "",
		       "\n",
		       "    AWS_S3_BUCKET=",
		       {
			 "Ref": "ExhibitorS3Bucket"
		       },
		       "",
		       "\n",
		       "    AWS_S3_PREFIX=",
		       {
			 "Ref": "AWS::StackName"
		       },
		       "",
		       "\n",
		       "  \"path\": |-\n",
		       "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor\n",
		       "- \"content\": |\n",
		       "    {\"uiConfiguration\":{\"plugins\":{\"banner\":{\"enabled\":false,\"backgroundColor\":\"#1E232F\",\"foregroundColor\":\"#FFFFFF\",\"headerTitle\":null,\"headerContent\":null,\"footerContent\":null,\"imagePath\":null,\"dismissible\":null},\"branding\":{\"enabled\":false},\"external-links\": {\"enabled\": false},\n",
		       "    \"authentication\":{\"enabled\":false},\n",
		       "\n",
		       "    \"oauth\":{\"enabled\":",
		       {
			 "Ref": "OAuthEnabled"
		       },
		       ",\"authHost\":\"https://dcos.auth0.com\"},",
		       "\n",
		       "\n",
		       "    \"networking\":{\"enabled\":false},\"organization\":{\"enabled\":false},\"tracking\":{\"enabled\":true}}}}\n",
		       "  \"path\": |-\n",
		       "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/ui-config.json\n",
		       "- \"content\": |\n",
		       "    AWS_REGION=",
		       {
			 "Ref": "AWS::Region"
		       },
		       "",
		       "\n",
		       "    AWS_STACK_ID=",
		       {
			 "Ref": "AWS::StackId"
		       },
		       "",
		       "\n",
		       "    AWS_STACK_NAME=",
		       {
			 "Ref": "AWS::StackName"
		       },
		       "",
		       "\n",
		       "    AWS_IAM_MASTER_ROLE_NAME=",
		       {
			 "Ref": "MasterRole"
		       },
		       "",
		       "\n",
		       "    AWS_IAM_SLAVE_ROLE_NAME=",
		       {
			 "Ref": "SlaveRole"
		       },
		       "",
		       "\n",
		       "  \"path\": |-\n",
		       "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cfn_signal_metadata\n",
		       "- \"content\": |-\n",
		       "    {}\n",
		       "  \"path\": |-\n",
		       "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/pkginfo.json\n",
		       "- \"content\": \"\"\n",
		       "  \"path\": |-\n",
		       "    /etc/mesosphere/roles/slave\n",
		       "- \"content\": \"\"\n",
		       "  \"path\": |-\n",
		       "    /etc/mesosphere/roles/aws\n"
		     ]
                  ]
               }
            }
         }
      },
      "OutboundNetworkAclEntry" : {
         "Type" : "AWS::EC2::NetworkAclEntry",
         "Properties" : {
            "NetworkAclId" : {
               "Ref" : "InternalNetworkAcl"
            },
            "CidrBlock" : "0.0.0.0/0",
            "RuleAction" : "allow",
            "Egress" : "true",
            "Protocol" : "-1",
            "RuleNumber" : "100",
            "PortRange" : {
               "To" : "65535",
               "From" : "0"
            }
         }
      },
      "SlaveRole" : {
         "Type" : "AWS::IAM::Role",
         "Properties" : {
            "Policies" : [
               {
                  "PolicyDocument" : {
                     "Statement" : [
                        {
                           "Action" : [
                              "cloudformation:*"
                           ],
                           "Effect" : "Allow",
                           "Resource" : [
                              {
                                 "Ref" : "AWS::StackId"
                              },
                              {
                                 "Fn::Join" : [
                                    "",
                                    [
                                       {
                                          "Ref" : "AWS::StackId"
                                       },
                                       "/*"
                                    ]
                                 ]
                              }
                           ]
                        }
                     ],
                     "Version" : "2012-10-17"
                  },
                  "PolicyName" : "Slaves"
               }
            ],
            "AssumeRolePolicyDocument" : {
               "Statement" : [
                  {
                     "Principal" : {
                        "Service" : [
                           "ec2.amazonaws.com"
                        ]
                     },
                     "Action" : [
                        "sts:AssumeRole"
                     ],
                     "Effect" : "Allow"
                  }
               ],
               "Version" : "2012-10-17"
            }
         }
      },
      "SplunkSecurityGroup" : {
         "Properties" : {
            "SecurityGroupIngress" : [
               {
                  "FromPort" : "22",
                  "CidrIp" : { "Ref" : "AdminLocation" },
                  "ToPort" : "22",
                  "IpProtocol" : "tcp"
               },
               {
                  "IpProtocol" : "tcp",
                  "ToPort" : "8000",
                  "CidrIp" : { "Ref" : "AdminLocation" },
                  "FromPort" : "8000"
               },
               {
                  "IpProtocol" : "tcp",
                  "ToPort" : "8088",
                  "CidrIp" : { "Ref" : "AdminLocation" },
                  "FromPort" : "8088"
               },
               {
                  "CidrIp" : {
                    "Fn::FindInMap" : [
                      "Parameters",
                      "VPCSubnetRange",
                      "default"
                    ]
                  },
                  "FromPort" : "22",
                  "ToPort" : "22",
                  "IpProtocol": "tcp"
               },
               {
                  "CidrIp" : {
                    "Fn::FindInMap" : [
                      "Parameters",
                      "VPCSubnetRange",
                      "default"
                    ]
                  },
                  "FromPort" : "8000",
                  "ToPort" : "8000",
                  "IpProtocol": "tcp"
               },
               {
                  "CidrIp" : {
                    "Fn::FindInMap" : [
                      "Parameters",
                      "VPCSubnetRange",
                      "default"
                    ]
                  },
                  "FromPort" : "8088",
                  "ToPort" : "8088",
                  "IpProtocol": "tcp"
               },
               {
                  "CidrIp" : {
                    "Fn::FindInMap" : [
                      "Parameters",
                      "VPCSubnetRange",
                      "default"
                    ]
                  },
                  "FromPort" : "-1",
                  "ToPort" : "-1",
                  "IpProtocol": "icmp"
               }
            ],
            "GroupDescription" : "Enable access to splunk",
            "VpcId" : {
               "Ref" : "Vpc"
            }
         },
         "Type" : "AWS::EC2::SecurityGroup"
      },
      "AdminSecurityGroup" : {
         "Properties" : {
            "SecurityGroupIngress" : [
               {
                  "FromPort" : "22",
                  "CidrIp" : { "Ref" : "AdminLocation" },
                  "ToPort" : "22",
                  "IpProtocol" : "tcp"
               },
               {
                  "IpProtocol" : "tcp",
                  "ToPort" : "80",
                  "CidrIp" : { "Ref" : "AdminLocation" },
                  "FromPort" : "80"
               },
               {
                  "FromPort" : "443",
                  "CidrIp" : { "Ref" : "AdminLocation" },
                  "ToPort" : "443",
                  "IpProtocol" : "tcp"
               },
               {
                  "CidrIp" : {
                    "Fn::FindInMap" : [
                      "Parameters",
                      "VPCSubnetRange",
                      "default"
                    ]
                  },
                  "FromPort" : "22",
                  "ToPort" : "22",
                  "IpProtocol": "tcp"
               },
               {
                  "CidrIp" : {
                    "Fn::FindInMap" : [
                      "Parameters",
                      "VPCSubnetRange",
                      "default"
                    ]
                  },
                  "FromPort" : "80",
                  "ToPort" : "80",
                  "IpProtocol": "tcp"
               },
               {
                  "CidrIp" : {
                    "Fn::FindInMap" : [
                      "Parameters",
                      "VPCSubnetRange",
                      "default"
                    ]
                  },
                  "FromPort" : "443",
                  "ToPort" : "443",
                  "IpProtocol": "tcp"
               },
               {
                  "CidrIp" : {
                    "Fn::FindInMap" : [
                      "Parameters",
                      "VPCSubnetRange",
                      "default"
                    ]
                  },
                  "FromPort" : "-1",
                  "ToPort" : "-1",
                  "IpProtocol": "icmp"
               }
            ],
            "GroupDescription" : "Enable admin access to servers",
            "VpcId" : {
               "Ref" : "Vpc"
            }
         },
         "Type" : "AWS::EC2::SecurityGroup"
      },
      "BIGIPAdminXface" : {
        "Type" : "AWS::EC2::NetworkInterface",
        "Properties": {
          "SubnetId" : {
            "Ref" : "AdminSubnet"
          },
          "GroupSet" : [
            {
              "Ref" : "AdminSecurityGroup"
            }
          ]
        }
      },
      "BIGIPAdminEIP" : {
        "Type": "AWS::EC2::EIP",
        "DependsOn": "GatewayToInternet",
        "Properties" : {
          "Domain" : "vpc"
        }
      },
      "BIGIPAdminEIPAssociation" : {
        "Type": "AWS::EC2::EIPAssociation",
        "DependsOn": [ "BIGIPAdminEIP", "BIGIPAdminXface", "BIGIP" ],
        "Properties" : {
          "AllocationId": { "Fn::GetAtt" :
            [ "BIGIPAdminEIP", "AllocationId" ]
          },
          "NetworkInterfaceId" : { "Ref" : "BIGIPAdminXface" }
        }
      },
      "BIGIPExternalXface" : {
        "Type" : "AWS::EC2::NetworkInterface",
        "Properties": {
          "SubnetId" : {
            "Ref" : "ExternalSubnet"
          },
          "GroupSet" : [
            {
              "Ref" : "BIGIPExternalSecurityGroup"
            }
          ]
        }
      },
      "BIGIPExternalSecurityGroup" : {
        "Type" : "AWS::EC2::SecurityGroup",
        "Properties" : {
          "SecurityGroupIngress" : [
            {
              "FromPort": "0",
              "ToPort": "65535",
              "IpProtocol": "tcp",
              "CidrIp" : "0.0.0.0/0"
            }
          ],
          "GroupDescription" : "Enable access to all ports in the external net",
          "VpcId" : { "Ref" : "Vpc" }
        }
      },
      "BIGIPExternalEIP" : {
        "Type": "AWS::EC2::EIP",
        "DependsOn": "GatewayToInternet",
        "Properties" : {
          "Domain" : "vpc"
        }
      },
      "BIGIPExternalEIPAssociation" : {
        "Type": "AWS::EC2::EIPAssociation",
        "DependsOn": [ "BIGIPExternalEIP", "BIGIPExternalXface", "BIGIP" ],
        "Properties" : {
          "AllocationId": { "Fn::GetAtt" :
            [ "BIGIPExternalEIP", "AllocationId" ]
          },
          "NetworkInterfaceId" : { "Ref" : "BIGIPExternalXface" }
        }
      },
      "BIGIPPrivateXface" : {
        "Type" : "AWS::EC2::NetworkInterface",
        "Properties": {
          "SubnetId" : {
            "Ref" : "InternalSubnet"
          },
          "GroupSet" : [
            {
              "Ref" : "SlaveSecurityGroup"
            }
          ]
        }
      },
      "BIGIP" : {
        "Type": "AWS::EC2::Instance",
        "DependsOn": "GatewayToInternet",
        "Properties": {
          "ImageId" : { "Fn::FindInMap" : [ "BIGIP1200GoodBYOLAmiMap",
                                            { "Ref" : "AWS::Region" },
                                            "ami" ] },
          "InstanceType" : "m3.xlarge",
          "KeyName" : { "Ref" : "KeyName" },
          "AvailabilityZone" : {
              "Fn::GetAtt" : [ "InternalSubnet", "AvailabilityZone" ]
          },
          "NetworkInterfaces" : [
            {
              "DeviceIndex" : "0",
              "NetworkInterfaceId" : { "Ref" : "BIGIPAdminXface" }
            },
            {
              "DeviceIndex" : "1",
              "NetworkInterfaceId" : { "Ref" : "BIGIPExternalXface" }
            },
            {
              "DeviceIndex" : "2",
              "NetworkInterfaceId" : { "Ref" : "BIGIPPrivateXface" }
            }
          ],
          "BlockDeviceMappings" : [
              {
                  "DeviceName" : "/dev/xvda",
                  "Ebs" : { "DeleteOnTermination" : "true" }
              }
          ],
          "Tags" : [
            { "Key" : "FromCloudStack",
              "Value" : { "Ref" : "AWS::StackName" } },
            { "Key" : "role",
              "Value" : "North-south ADC" },
            { "Key" : "Name",
              "Value" : "BIG-IP" }
          ],
          "UserData" : {
            "Fn::Base64": {
              "Fn::Join": [
                "",
                [
                  "#!/bin/bash\n",
                  "/opt/aws/apitools/cfn-init-1.4-0.amzn1/bin/cfn-init -v -s ",
                    { "Ref": "AWS::StackId" },
                    " -r BIGIP ",
                    "--region ",
                    { "Ref": "AWS::Region" },
                    "\n"
                ]
              ]
            }
          }
        },
        "Metadata": {
          "AWS::CloudFormation::Init": {
            "config": {
              "files": {
                "/tmp/firstrun.sh": {
                  "content": {
                    "Fn::Join": [
                    "",
                    [
                    "#!/bin/bash\n",
                    ". /tmp/firstrun.config\n",
                    "FILE=/tmp/firstrun.log\n",
                    "if [ ! -e $FILE ]; then\n",
                    "   touch $FILE\n",
                    "   nohup $0 0<&- &>/dev/null &\n",
                    "   exit\n",
                    "fi\n",
                    "function checkF5Ready {\n",
                    "   sleep 5\n",
                    "   while [[ ! -e '/var/prompt/ps1' ]]; do\n",
                    "      echo -n '.'\n",
                    "      sleep 5\n",
                    "   done \n",
                    "   sleep 5\n",
                    "   STATUS=`cat /var/prompt/ps1`\n",
                    "   while [[ ${STATUS}x != 'NO LICENSE'x ]]; do\n",
                    "      echo -n '.'\n",
                    "      sleep 5\n",
                    "      STATUS=`cat /var/prompt/ps1`\n",
                    "   done\n",
                    "   echo -n ' '\n",
                    "   while [[ ! -e '/var/prompt/cmiSyncStatus' ]]; do\n",
                    "      echo -n '.'\n",
                    "      sleep 5\n",
                    "   done \n",
                    "   STATUS=`cat /var/prompt/cmiSyncStatus`\n",
                    "   while [[ ${STATUS}x != 'Standalone'x ]]; do\n",
                    "      echo -n '.'\n",
                    "      sleep 5\n",
                    "      STATUS=`cat /var/prompt/cmiSyncStatus`\n",
                    "   done\n",
                    "}\n",
                    "function checkStatusnoret {\n",
                    "   sleep 10\n",
                    "   STATUS=`cat /var/prompt/ps1`\n",
                    "   while [[ (${STATUS}x != 'Active'x) && (${STATUS}x != 'Standby'x) ]]; do\n",
                    "      echo -n '.'\n",
                    "      sleep 5\n",
                    "      STATUS=`cat /var/prompt/ps1`\n",
                    "   done\n",
                    "}\n",
                    "exec 1<&-\n",
                    "exec 2<&-\n",
                    "exec 1<>$FILE\n",
                    "exec 2>&1\n",
                    "checkF5Ready\n",
                    "sleep 150\n",
                    "echo 'starting tmsh config'\n",
                    "tmsh modify sys ntp timezone ${TZ}\n",
                    "tmsh modify sys ntp servers add { 0.pool.ntp.org 1.pool.ntp.org }\n",
                    "tmsh modify sys dns name-servers add { ${NAME_SERVER} }\n",
                    "tmsh modify sys db setup.run value false\n",
                    "tmsh modify sys global-settings hostname ${HOSTNAME}\n",
                    "INSTANCEID=`curl http://169.254.169.254/1.0/meta-data/instance-id`\n",
                    "if [ $? -eq 0 ]; then\n",
                    "  tmsh modify auth user admin password $INSTANCEID\n",
                    "  echo \"Set admin password to instance ID\"\n",
                    "else\n",
                    "  tmsh modify auth user admin password GoF5!\n",
                    "fi\n",
                    "tmsh save /sys config\n",
                    "tmsh create net vlan external interfaces add { 1.1 } \n",
                    "tmsh create net self ${EXTIP}/${EXTMASK} vlan external\n",
                    "tmsh create net vlan internal interfaces add { 1.2 } \n",
                    "tmsh create net self ${INTIP}/${INTMASK} vlan internal\n",
                    "tmsh create net route default gw ${GATEWAY}\n",
                    "tmsh create /auth partition mesos\n",
                    "tmsh modify sys folder /mesos traffic-group traffic-group-local-only\n",
                    "tmsh mv cm device bigip1 ${HOSTNAME}\n",
                    "if [ -n \"${REGKEY}\" ]; then\n",
                    "  tmsh save /sys config\n",
                    "  echo 'start install licensing'\n",
                    "  tmsh install /sys license registration-key ${REGKEY}\n",
                    "  sleep 20\n",
                    "fi\n",
                    "tmsh save /sys config\n",
                    "checkStatusnoret\n",
                    "sleep 30\n",
                    "tmsh modify sys db dhclient.mgmt { value disable }\n",
                    "tmsh save /sys config\n"
                    ]
                  ]
                  },
                  "mode": "000777",
                  "owner": "root",
                  "group": "root"
                },
                "/tmp/firstrun.config": {
                  "content": {
                    "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash\n",
                      "HOSTNAME=`curl http://169.254.169.254/2014-11-05/meta-data/hostname`\n",
                      "TZ='America/Denver'\n",
                      "REGKEY='",
                      { "Ref": "BIGIPRegKey" },
                      "'\n",
                      "MGMTIP='",
                      {
                        "Fn::GetAtt": [
                          "BIGIPAdminXface",
                          "PrimaryPrivateIpAddress"
                        ]
                      },
                      "'\n",
                      "EXTIP_PUB='",
                      { "Ref": "BIGIPExternalEIP" },
                      "'\n",
                      "EXTIP='",
                      {
                         "Fn::GetAtt": [
                          "BIGIPExternalXface",
                          "PrimaryPrivateIpAddress"
                        ]
                      },
                      "'\n",
                      "INTIP='",
                      {
                         "Fn::GetAtt": [
                           "BIGIPPrivateXface",
                           "PrimaryPrivateIpAddress"
                        ]
                      },
                      "'\n",
                      "GATEWAY_MAC=`ifconfig eth1 | egrep HWaddr | awk '{print tolower($5)}'`\n",
                      "GATEWAY_CIDR_BLOCK=`curl http://169.254.169.254/2014-11-05/meta-data/network/interfaces/macs/${GATEWAY_MAC}/subnet-ipv4-cidr-block`\n",
                      "GATEWAY_NET=${GATEWAY_CIDR_BLOCK%/*}\n",
                      "GATEWAY_PREFIX=${GATEWAY_CIDR_BLOCK#*/}\n",
                      "GATEWAY=`echo ${GATEWAY_NET} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+1 }'`\n",
                      "VPC_CIDR_BLOCK=`curl http://169.254.169.254/2014-11-05/meta-data/network/interfaces/macs/${GATEWAY_MAC}/vpc-ipv4-cidr-block`\n",
                      "VPC_NET=${VPC_CIDR_BLOCK%/*}\n",
                      "VPC_PREFIX=${VPC_CIDR_BLOCK#*/}\n",
                      "NAME_SERVER=`echo ${VPC_NET} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+2 }'`\n",
                      "INTMASK='22'\n",
                      "EXTMASK='22'\n",
                      "AWS_REGION='",
                      {
                        "Ref" : "AWS::Region"
                      },
                      "'\n"
                    ]
                    ]
                  },
                  "mode": "000777",
                  "owner": "root",
                  "group": "root"
                }
              },
              "commands": {
                "b-configure-BigIP": {
                  "command": "/tmp/firstrun.sh\n"
                }
              }
            }
          }
        }
      },
      "SplunkReadyAdminXface" : {
        "Type" : "AWS::EC2::NetworkInterface",
        "Properties": {
          "SubnetId" : {
            "Ref" : "AdminSubnet"
          },
          "GroupSet" : [
            {
              "Ref" : "SplunkSecurityGroup"
            }
          ]
        }
      },
      "SplunkReadyAdminEIP" : {
        "Type": "AWS::EC2::EIP",
        "DependsOn": "GatewayToInternet",
        "Properties" : {
          "Domain" : "vpc"
        }
      },
      "SplunkReadyAdminEIPAssociation" : {
        "Type": "AWS::EC2::EIPAssociation",
        "DependsOn": [
          "SplunkReadyAdminEIP",
          "SplunkReadyAdminXface",
          "SplunkReadyInstance"
        ],
        "Properties" : {
          "AllocationId": { "Fn::GetAtt" :
            [ "SplunkReadyAdminEIP", "AllocationId" ]
          },
          "NetworkInterfaceId" : { "Ref" : "SplunkReadyAdminXface" }
        }
      },
      "SplunkReadyInstance" : {
        "Type": "AWS::EC2::Instance",
        "DependsOn": "GatewayToInternet",
        "Properties": {
          "ImageId" : { "Fn::FindInMap" : [ "AmazonLinuxHVMAmiMap",
                                            { "Ref" : "AWS::Region" },
                                            "ami" ] },
          "InstanceType" : "t2.medium",
          "KeyName" : { "Ref" : "KeyName" },
          "AvailabilityZone" : {
              "Fn::GetAtt" : [ "AdminSubnet", "AvailabilityZone" ]
          },
          "NetworkInterfaces" : [
            {
              "DeviceIndex" : "0",
              "NetworkInterfaceId" : { "Ref" : "SplunkReadyAdminXface" }
            }
          ],
          "Tags" : [
            { "Key" : "Name",
              "Value" : "SplunkReadyInstance" },
            { "Key" : "FromCloudStack",
              "Value" : { "Ref" : "AWS::StackName" } }
          ]
        }
      },
      "InternalSubnetNetworkAclAssociation" : {
         "Properties" : {
            "NetworkAclId" : {
               "Ref" : "InternalNetworkAcl"
            },
            "SubnetId" : {
               "Ref" : "InternalSubnet"
            }
         },
         "Type" : "AWS::EC2::SubnetNetworkAclAssociation"
      },
      "SlaveInstanceProfile" : {
         "Properties" : {
            "Roles" : [
               {
                  "Ref" : "SlaveRole"
               }
            ],
            "Path" : "/"
         },
         "Type" : "AWS::IAM::InstanceProfile"
      },
      "MasterInstanceProfile" : {
         "Type" : "AWS::IAM::InstanceProfile",
         "Properties" : {
            "Path" : "/",
            "Roles" : [
               {
                  "Ref" : "MasterRole"
               }
            ]
         }
      },
      "MasterLaunchConfig" : {
         "Properties" : {
            "ImageId" : {
               "Fn::FindInMap" : [
                  "RegionToAmi",
                  {
                     "Ref" : "AWS::Region"
                  },
                  "stable"
               ]
            },
            "AssociatePublicIpAddress" : "true",
            "SecurityGroups" : [
               {
                  "Ref" : "MasterSecurityGroup"
               },
               {
                  "Ref" : "AdminSecurityGroup"
               }
            ],
            "BlockDeviceMappings" : [
               {
                  "VirtualName" : "ephemeral0",
                  "DeviceName" : "/dev/sdb"
               }
            ],
            "IamInstanceProfile" : {
               "Ref" : "MasterInstanceProfile"
            },
            "KeyName" : {
               "Ref" : "KeyName"
            },
            "InstanceType" : {
               "Fn::FindInMap" : [
                  "Parameters",
                  "MasterInstanceType",
                  "default"
               ]
            },
            "UserData" : {
               "Fn::Base64" : {
                  "Fn::Join": [
		     "",
		     [
		       "#cloud-config\n",
		       "\"coreos\":\n",
		       "  \"units\":\n",
		       "  - \"command\": |-\n",
		       "      start\n",
		       "    \"content\": |\n",
		       "      [Unit]\n",
		       "      Description=AWS Setup: Formats the /var/lib ephemeral drive\n",
		       "      Before=var-lib.mount dbus.service\n",
		       "      [Service]\n",
		       "      Type=oneshot\n",
		       "      RemainAfterExit=yes\n",
		       "      ExecStart=/bin/bash -c \"(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)\"\n",
		       "    \"name\": |-\n",
		       "      format-var-lib-ephemeral.service\n",
		       "  - \"command\": |-\n",
		       "      start\n",
		       "    \"content\": |\n",
		       "      [Unit]\n",
		       "      Description=AWS Setup: Mount /var/lib\n",
		       "      Before=dbus.service\n",
		       "      [Mount]\n",
		       "      What=/dev/xvdb\n",
		       "      Where=/var/lib\n",
		       "      Type=ext4\n",
		       "    \"name\": |-\n",
		       "      var-lib.mount\n",
		       "  - \"command\": |-\n",
		       "      stop\n",
		       "    \"mask\": !!bool |-\n",
		       "      true\n",
		       "    \"name\": |-\n",
		       "      etcd.service\n",
		       "  - \"command\": |-\n",
		       "      stop\n",
		       "    \"mask\": !!bool |-\n",
		       "      true\n",
		       "    \"name\": |-\n",
		       "      update-engine.service\n",
		       "  - \"command\": |-\n",
		       "      stop\n",
		       "    \"mask\": !!bool |-\n",
		       "      true\n",
		       "    \"name\": |-\n",
		       "      locksmithd.service\n",
		       "  - \"command\": |-\n",
		       "      stop\n",
		       "    \"name\": |-\n",
		       "      systemd-resolved.service\n",
		       "  - \"command\": |-\n",
		       "      restart\n",
		       "    \"name\": |-\n",
		       "      systemd-journald.service\n",
		       "  - \"command\": |-\n",
		       "      restart\n",
		       "    \"name\": |-\n",
		       "      docker.service\n",
		       "  - \"command\": |-\n",
		       "      start\n",
		       "    \"content\": |\n",
		       "      [Unit]\n",
		       "      Before=dcos.target\n",
		       "      [Service]\n",
		       "      Type=oneshot\n",
		       "      StandardOutput=journal+console\n",
		       "      StandardError=journal+console\n",
		       "      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d\n",
		       "      ExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\n",
		       "    \"name\": |-\n",
		       "      dcos-link-env.service\n",
		       "  - \"content\": |\n",
		       "      [Unit]\n",
		       "      Description=Pkgpanda: Download DC/OS to this host.\n",
		       "      After=network-online.target\n",
		       "      Wants=network-online.target\n",
		       "      ConditionPathExists=!/opt/mesosphere/\n",
		       "      [Service]\n",
		       "      EnvironmentFile=/etc/mesosphere/setup-flags/bootstrap-id\n",
		       "      Type=oneshot\n",
		       "      StandardOutput=journal+console\n",
		       "      StandardError=journal+console\n",
		       "      ExecStartPre=/usr/bin/curl -fLsSv --retry 20 -Y 100000 -y 60 -o /tmp/bootstrap.tar.xz https://downloads.dcos.io/dcos/EarlyAccess/bootstrap/${BOOTSTRAP_ID}.bootstrap.tar.xz\n",
		       "      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\n",
		       "      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere\n",
		       "      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz\n",
		       "    \"name\": |-\n",
		       "      dcos-download.service\n",
		       "  - \"command\": |-\n",
		       "      start\n",
		       "    \"content\": |\n",
		       "      [Unit]\n",
		       "      Description=Pkgpanda: Specialize DC/OS for this host.\n",
		       "      Requires=dcos-download.service\n",
		       "      After=dcos-download.service\n",
		       "      [Service]\n",
		       "      Type=oneshot\n",
		       "      StandardOutput=journal+console\n",
		       "      StandardError=journal+console\n",
		       "      EnvironmentFile=/opt/mesosphere/environment\n",
		       "      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\n",
		       "      [Install]\n",
		       "      WantedBy=multi-user.target\n",
		       "    \"enable\": !!bool |-\n",
		       "      true\n",
		       "    \"name\": |-\n",
		       "      dcos-setup.service\n",
		       "    \"no_block\": !!bool |-\n",
		       "      true\n",
		       "  - \"command\": |-\n",
		       "      start\n",
		       "    \"content\": |-\n",
		       "      [Unit]\n",
		       "      Description=AWS Setup: Signal CloudFormation Success\n",
		       "      After=dcos.target\n",
		       "      Requires=dcos.target\n",
		       "      ConditionPathExists=!/var/lib/dcos-cfn-signal\n",
		       "      [Service]\n",
		       "      Type=simple\n",
		       "      Restart=on-failure\n",
		       "      StartLimitInterval=0\n",
		       "      RestartSec=15s\n",
		       "      EnvironmentFile=/opt/mesosphere/environment\n",
		       "      EnvironmentFile=/opt/mesosphere/etc/cfn_signal_metadata\n",
		       "      Environment=\"AWS_CFN_SIGNAL_THIS_RESOURCE=MasterServerGroup\"\n",
		       "      ExecStartPre=/bin/ping -c1 leader.mesos\n",
		       "      ExecStartPre=/opt/mesosphere/bin/cfn-signal\n",
		       "      ExecStart=/usr/bin/touch /var/lib/dcos-cfn-signal\n",
		       "    \"name\": |-\n",
		       "      dcos-cfn-signal.service\n",
		       "  \"update\":\n",
		       "    \"reboot-strategy\": |-\n",
		       "      off\n",
		       "\"write_files\":\n",
		       "- \"content\": |\n",
		       "    https://downloads.dcos.io/dcos/EarlyAccess\n",
		       "  \"owner\": |-\n",
		       "    root\n",
		       "  \"path\": |-\n",
		       "    /etc/mesosphere/setup-flags/repository-url\n",
		       "  \"permissions\": |-\n",
		       "    0644\n",
		       "- \"content\": |\n",
		       "    BOOTSTRAP_ID=3a2b7e03c45cd615da8dfb1b103943894652cd71\n",
		       "  \"owner\": |-\n",
		       "    root\n",
		       "  \"path\": |-\n",
		       "    /etc/mesosphere/setup-flags/bootstrap-id\n",
		       "  \"permissions\": |-\n",
		       "    0644\n",
		       "- \"content\": |\n",
		       "    [\"dcos-config--setup_537afa008db7ba8f99ce73f9c0ef425fa61d3454\", \"dcos-metadata--setup_537afa008db7ba8f99ce73f9c0ef425fa61d3454\"]\n",
		       "  \"owner\": |-\n",
		       "    root\n",
		       "  \"path\": |-\n",
		       "    /etc/mesosphere/setup-flags/cluster-packages.json\n",
		       "  \"permissions\": |-\n",
		       "    0644\n",
		       "- \"content\": |\n",
		       "    [Journal]\n",
		       "    MaxLevelConsole=warning\n",
		       "  \"owner\": |-\n",
		       "    root\n",
		       "  \"path\": |-\n",
		       "    /etc/systemd/journald.conf.d/dcos.conf\n",
		       "  \"permissions\": |-\n",
		       "    0644\n",
		       "- \"content\": |\n",
		       "    MESOS_CLUSTER=",
		       {
			 "Ref": "AWS::StackName"
		       },
		       "",
		       "\n",
		       "  \"path\": |-\n",
		       "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/mesos-master-provider\n",
		       "- \"content\": |\n",
		       "    ADMINROUTER_ACTIVATE_AUTH_MODULE=",
		       {
			 "Ref": "OAuthEnabled"
		       },
		       "",
		       "\n",
		       "  \"path\": |-\n",
		       "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/adminrouter.env\n",
		       "- \"content\": |\n",
		       "    MASTER_SOURCE=exhibitor\n",
		       "    EXHIBITOR_ADDRESS=",
		       {
			 "Fn::GetAtt": [
			   "InternalMasterLoadBalancer",
			   "DNSName"
			 ]
		       },
		       "",
		       "\n",
		       "    RESOLVERS=169.254.169.253\n",
		       "  \"path\": |-\n",
		       "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/dns_config\n",
		       "- \"content\": |\n",
		       "    EXHIBITOR_BACKEND=AWS_S3\n",
		       "    AWS_REGION=",
		       {
			 "Ref": "AWS::Region"
		       },
		       "",
		       "\n",
		       "    AWS_S3_BUCKET=",
		       {
			 "Ref": "ExhibitorS3Bucket"
		       },
		       "",
		       "\n",
		       "    AWS_S3_PREFIX=",
		       {
			 "Ref": "AWS::StackName"
		       },
		       "",
		       "\n",
		       "  \"path\": |-\n",
		       "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor\n",
		       "- \"content\": |\n",
		       "    {\"uiConfiguration\":{\"plugins\":{\"banner\":{\"enabled\":false,\"backgroundColor\":\"#1E232F\",\"foregroundColor\":\"#FFFFFF\",\"headerTitle\":null,\"headerContent\":null,\"footerContent\":null,\"imagePath\":null,\"dismissible\":null},\"branding\":{\"enabled\":false},\"external-links\": {\"enabled\": false},\n",
		       "    \"authentication\":{\"enabled\":false},\n",
		       "\n",
		       "    \"oauth\":{\"enabled\":",
		       {
			 "Ref": "OAuthEnabled"
		       },
		       ",\"authHost\":\"https://dcos.auth0.com\"},",
		       "\n",
		       "\n",
		       "    \"networking\":{\"enabled\":false},\"organization\":{\"enabled\":false},\"tracking\":{\"enabled\":true}}}}\n",
		       "  \"path\": |-\n",
		       "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/ui-config.json\n",
		       "- \"content\": |\n",
		       "    AWS_REGION=",
		       {
			 "Ref": "AWS::Region"
		       },
		       "",
		       "\n",
		       "    AWS_STACK_ID=",
		       {
			 "Ref": "AWS::StackId"
		       },
		       "",
		       "\n",
		       "    AWS_STACK_NAME=",
		       {
			 "Ref": "AWS::StackName"
		       },
		       "",
		       "\n",
		       "    AWS_IAM_MASTER_ROLE_NAME=",
		       {
			 "Ref": "MasterRole"
		       },
		       "",
		       "\n",
		       "    AWS_IAM_SLAVE_ROLE_NAME=",
		       {
			 "Ref": "SlaveRole"
		       },
		       "",
		       "\n",
		       "  \"path\": |-\n",
		       "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cfn_signal_metadata\n",
		       "- \"content\": |-\n",
		       "    {}\n",
		       "  \"path\": |-\n",
		       "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/pkginfo.json\n",
		       "- \"content\": \"\"\n",
		       "  \"path\": |-\n",
		       "    /etc/mesosphere/roles/master\n",
		       "- \"content\": \"\"\n",
		       "  \"path\": |-\n",
		       "    /etc/mesosphere/roles/aws_master\n",
		       "- \"content\": \"\"\n",
		       "  \"path\": |-\n",
		       "    /etc/mesosphere/roles/aws\n"
		     ]
		  ]
               }
            }
         },
         "Type" : "AWS::AutoScaling::LaunchConfiguration"
      },
      "InternetGateway" : {
         "Properties" : {
            "Tags" : [
               {
                  "Value" : {
                     "Ref" : "AWS::StackName"
                  },
                  "Key" : "Application"
               }
            ]
         },
         "Type" : "AWS::EC2::InternetGateway",
         "DependsOn" : "Vpc"
      },
      "InternalSubnet" : {
         "Properties" : {
            "VpcId" : {
               "Ref" : "Vpc"
            },
            "Tags" : [
               {
                  "Key" : "Application",
                  "Value" : {
                     "Ref" : "AWS::StackName"
                  }
               }
            ],
            "CidrBlock" : {
               "Fn::FindInMap" : [
                  "Parameters",
                  "InternalSubnetRange",
                  "default"
               ]
            }
         },
         "Type" : "AWS::EC2::Subnet"
      },
      "AdminSubnet" : {
        "Properties" : {
          "VpcId" : {
            "Ref" : "Vpc"
          },
          "Tags" : [
            {
              "Key" : "Application",
              "Value" : {
                "Ref" : "AWS::StackName"
              }
            },
            {
              "Key" : "Network",
              "Value": "Admin"
            }
          ],
          "CidrBlock" : {
            "Fn::FindInMap" : [
              "Parameters",
              "AdminSubnetRange",
              "default"
            ]
          },
          "AvailabilityZone" : {
            "Fn::GetAtt" : [
              "InternalSubnet",
              "AvailabilityZone"
            ]
          }
        },
        "Type" : "AWS::EC2::Subnet"
      },
      "ExternalSubnet" : {
        "Properties" : {
          "VpcId" : {
            "Ref" : "Vpc"
          },
          "Tags" : [
            {
              "Key" : "Application",
              "Value" : {
                "Ref" : "AWS::StackName"
              }
            },
            {
              "Key" : "Network",
              "Value": "External"
            }
          ],
          "CidrBlock" : {
            "Fn::FindInMap" : [
              "Parameters",
              "ExternalSubnetRange",
              "default"
            ]
          },
          "AvailabilityZone" : {
            "Fn::GetAtt" : [
              "InternalSubnet",
              "AvailabilityZone"
            ]
          }
        },
        "Type" : "AWS::EC2::Subnet"
      },
      "MasterSecurityGroup" : {
         "Properties" : {
            "GroupDescription" : "Mesos Masters",
            "SecurityGroupIngress" : [
               {
                  "SourceSecurityGroupId" : {
                     "Ref" : "LbSecurityGroup"
                  },
                  "IpProtocol" : "tcp",
                  "ToPort" : "5050",
                  "FromPort" : "5050"
               },
               {
                  "SourceSecurityGroupId" : {
                     "Ref" : "LbSecurityGroup"
                  },
                  "ToPort" : "80",
                  "IpProtocol" : "tcp",
                  "FromPort" : "80"
               },
               {
                  "ToPort" : "8080",
                  "IpProtocol" : "tcp",
                  "FromPort" : "8080",
                  "SourceSecurityGroupId" : {
                     "Ref" : "LbSecurityGroup"
                  }
               },
               {
                  "FromPort" : "8181",
                  "IpProtocol" : "tcp",
                  "ToPort" : "8181",
                  "SourceSecurityGroupId" : {
                     "Ref" : "LbSecurityGroup"
                  }
               },
               {
                  "SourceSecurityGroupId" : {
                     "Ref" : "LbSecurityGroup"
                  },
                  "FromPort" : "2181",
                  "IpProtocol" : "tcp",
                  "ToPort" : "2181"
               }
            ],
            "VpcId" : {
               "Ref" : "Vpc"
            }
         },
         "Type" : "AWS::EC2::SecurityGroup"
      },
      "LbSecurityGroup" : {
         "Properties" : {
            "GroupDescription" : "Mesos Master LB",
            "VpcId" : {
               "Ref" : "Vpc"
            }
         },
         "Type" : "AWS::EC2::SecurityGroup"
      },
      "DHCPOptions" : {
         "Properties" : {
            "DomainName" : {
               "Fn::If" : [
                  "RegionIsUsEast1",
                  "ec2.internal",
                  {
                     "Fn::Join" : [
                        "",
                        [
                           {
                              "Ref" : "AWS::Region"
                           },
                           ".compute.internal"
                        ]
                     ]
                  }
               ]
            },
            "DomainNameServers" : [
               "AmazonProvidedDNS"
            ]
         },
         "Type" : "AWS::EC2::DHCPOptions"
      },
      "SlaveServerGroup" : {
         "Type" : "AWS::AutoScaling::AutoScalingGroup",
         "CreationPolicy" : {
            "ResourceSignal" : {
               "Count" : {
                  "Ref" : "SlaveInstanceCount"
               },
               "Timeout" : {
                  "Fn::FindInMap" : [
                     "Parameters",
                     "StackCreationTimeout",
                     "default"
                  ]
               }
            }
         },
         "Properties" : {
            "AvailabilityZones" : [
               {
                  "Fn::GetAtt" : [
                     "InternalSubnet",
                     "AvailabilityZone"
                  ]
               }
            ],
            "LaunchConfigurationName" : {
               "Ref" : "SlaveLaunchConfig"
            },
            "MinSize" : {
               "Ref" : "SlaveInstanceCount"
            },
            "Tags" : [
               {
                  "Value" : "mesos-slave",
                  "Key" : "role",
                  "PropagateAtLaunch" : "true"
               }
            ],
            "DesiredCapacity" : {
               "Ref" : "SlaveInstanceCount"
            },
            "VPCZoneIdentifier" : [
               {
                  "Ref" : "InternalSubnet"
               }
            ],
            "MaxSize" : {
               "Ref" : "SlaveInstanceCount"
            }
         },
         "DependsOn" : "GatewayToInternet"
      }
   },
   "Outputs" : {
      "MarathonUI" : {
        "Description" : "Point a browser here to get to Marathon",
        "Value" : {
          "Fn::Join" : [ "", [
            "http://",
            { "Fn::GetAtt" : [
                "ElasticLoadBalancer",
                "DNSName"
              ]
            },
            "/service/marathon/ui/"
          ] ]
        }
      },
      "InternalMarathonURL" : {
        "Description" : "Get to marathon service from inside the VPC",
        "Value" : {
          "Fn::Join" : [ "", [
            "http://",
            { "Fn::GetAtt" : [
                "InternalMasterLoadBalancer",
                "DNSName"
              ]
            },
            "/service/marathon"
          ] ]
        }
      },
      "DnsAddress" : {
         "Value" : {
            "Fn::GetAtt" : [
               "ElasticLoadBalancer",
               "DNSName"
            ]
         },
         "Description" : "Mesos Master"
      },
      "BIGIPAdminIP" : {
        "Description" : "Public IP of the BIG-IP's admin interface",
        "Value" : { "Ref": "BIGIPAdminEIP" }
      },
      "BIGIPAdminUI" : {
        "Description" : "URL to administer BIG-IP",
        "Value" : {
          "Fn::Join" : [ "", [
            "https://",
            { "Ref": "BIGIPAdminEIP" },
            "/"
          ] ]
        }
      },
      "BIGIPAdminPassword" : {
        "Description": "Password to log in to BIG-IP UI with (CLI: use SSH)",
        "Value" : { "Ref": "BIGIP" }
      },
      "BIGIPAdminPrivateIP" : {
        "Description": "IP that f5-marathon-lb will admin BIG-IP via",
        "Value" : { "Fn::GetAtt": [ "BIGIPAdminXface",
                                    "PrimaryPrivateIpAddress" ]
        }
      },
      "BIGIPExternalPrivateIP" : {
        "Description": "IP that BIG-IP will listen on for web connections",
        "Value" : { "Fn::GetAtt": [ "BIGIPExternalXface",
                                    "PrimaryPrivateIpAddress" ]
        }
      },
      "FrontendExample" : {
        "Description": "URL of the mock frontend web application",
        "Value" : {
          "Fn::Join" : [ "", [
            "https://",
            { "Ref": "BIGIPExternalEIP" },
            "/"
          ] ]
        }
      },
      "FrontendExampleInsecure" : {
        "Description": "URL of the mock frontend web application served over HTTP",
        "Value" : {
          "Fn::Join" : [ "", [
            "http://",
            { "Ref": "BIGIPExternalEIP" },
            "/"
          ] ]
        }
      },
      "SplunkReadySSH" : {
        "Description": "SSH to an instance that is ready to install Splunk",
        "Value" : {
          "Fn::Join" : [ "", [
            "ssh ec2-user@",
            { "Ref": "SplunkReadyAdminEIP" }
          ] ]
        }
      },
      "SplunkReadyPrivateIP" : {
        "Description": "Private IP that data sources should use to send to splunk",
        "Value": {
          "Fn::GetAtt" : [ "SplunkReadyAdminXface",
                           "PrimaryPrivateIpAddress" ]
        }
      }
   },
   "Conditions" : {
      "RegionIsUsEast1" : {
         "Fn::Equals" : [
            {
               "Ref" : "AWS::Region"
            },
            "us-east-1"
         ]
      }
   },
   "Mappings" : {
      "BIGIP1200GoodBYOLAmiMap" : {
       "ap-southeast-1" : { "ami": "ami-89fe2bea" },
       "ap-southeast-2" : { "ami": "ami-be486add" },
       "us-west-2" : { "ami": "ami-6bea1e0b" },
       "us-east-1" : { "ami": "ami-809284ea" },
       "ap-northeast-1" : { "ami": "ami-6410030a" },
       "us-west-1" : { "ami": "ami-98b3cff8" },
       "eu-central-1" : { "ami": "ami-734dac1c" },
       "eu-west-1" : { "ami": "ami-17ca4964" },
       "sa-east-1" : { "ami": "ami-8b2aa5e7" }
      },
      "AmazonLinuxHVMAmiMap" : {
        "ap-southeast-1" : { "ami": "ami-a59b49c6" },
        "ap-southeast-2" : { "ami": "ami-dc361ebf" },
        "us-west-2" : { "ami": "ami-7172b611" },
        "us-east-1" : { "ami": "ami-6869aa05" },
        "ap-northeast-1" : { "ami": "ami-374db956" },
        "us-west-1" : { "ami" : "ami-31490d51" },
        "eu-central-1" : { "ami": "ami-ea26ce85" },
        "eu-west-1" : { "ami": "ami-f9dd458a" },
        "sa-east-1" : { "ami": "ami-6dd04501" }
      },
      "Parameters" : {
         "InternalSubnetRange" : {
            "default" : "10.0.4.0/22"
         },
         "MasterInstanceType" : {
            "default" : "m3.xlarge"
         },
         "StackCreationTimeout" : {
            "default" : "PT45M"
         },
         "SlaveInstanceType" : {
            "default" : "m3.xlarge"
         },
         "AdminSubnetRange" : {
            "default" : "10.0.8.0/22"
         },
         "ExternalSubnetRange" : {
            "default" : "10.0.12.0/22"
         },
         "VPCSubnetRange" : {
            "default" : "10.0.0.0/16"
         }
      },
      "RegionToAmi": {
        "sa-east-1": {
          "stable": "ami-154af179"
        },
        "eu-west-1": {
          "stable": "ami-55d20b26"
        },
        "us-east-1": {
          "stable": "ami-37bdc15d"
        },
        "ap-northeast-1": {
          "stable": "ami-84e0c7ea"
        },
        "eu-central-1": {
          "stable": "ami-fdd4c791"
        },
        "us-west-2": {
          "stable": "ami-00ebfc61"
        },
        "ap-southeast-2": {
          "stable": "ami-f35b0590"
        },
        "ap-southeast-1": {
          "stable": "ami-da67a0b9"
        },
        "us-gov-west-1": {
          "stable": "ami-05bc0164"
        },
        "us-west-1": {
          "stable": "ami-27553a47"
        }
      }
   },
   "Parameters" : {
      "KeyName" : {
         "Type" : "AWS::EC2::KeyPair::KeyName",
         "Description" : "Required: Specify your AWS EC2 Key Pair."
      },
      "AdminLocation" : {
         "MinLength" : "9",
         "Type" : "String",
         "AllowedPattern" : "^([0-9]+\\.){3}[0-9]+\\/[0-9]+$",
         "MaxLength" : "18",
         "Default" : "0.0.0.0/0",
         "Description" : "Optional: Specify the IP range to whitelist for access to the admin zone. Must be a valid CIDR.",
         "ConstraintDescription" : "must be a valid CIDR."
      },
      "SlaveInstanceCount" : {
         "Type" : "Number",
         "Description" : "Required: Specify the number of MESOS slave nodes",
         "Default" : "4"
      },
      "OAuthEnabled": {
        "Description": "Enable OAuth authentication (currently not supported)",
        "AllowedValues": [
          "false"
        ],
        "Default": "false",
        "Type": "String"
      },
      "BIGIPRegKey" : {
        "AllowedPattern": "|([\\x41-\\x5A][\\x41-\\x5A|\\x30-\\x39]{4})\\-([\\x41-\\x5A|\\x30-\\x39]{5})\\-([\\x41-\\x5A|\\x30-\\x39]{5})\\-([\\x41-\\x5A|\\x30-\\x39]{5})\\-([\\x41-\\x5A|\\x30-\\x39]{7})",
        "ConstraintDescription": "Please verify your F5 BYOL regkey.",
        "Description": "F5 BIG-IP BYOL license regkey (or empty to license manually)",
        "MaxLength": "255",
        "MinLength": "0",
        "Default" : "",
        "Type": "String"
      }
   },
   "Metadata" : {
      "DcosImageCommit": "14509fe1e7899f439527fb39867194c7a425c771",
      "TemplateGenerationDate": "2016-04-19 09:27:40.981039"
   }
}